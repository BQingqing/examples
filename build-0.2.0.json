{"context":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/context/example","instruction":"Context\n-------\n\nA context is the root of the render tree.  In order for a Famo.us renderable\n(such as a Surface) to be rendered, it either needs to be added to the context\nor added to a node that has been added to the context.\n\nIn HTML, the new context is added to the body tag as a <div> with class\n'famous-container'. Renderables added to the context will be child nodes of\nthis container.\n\nIn this example, we create a context and add a Famo.us surface to it so that\nthe surface will be rendered on the screen.","javascript":"var Engine  = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nmainContext.add(surface);\n"},{"name":"context-in-existing-element","url":"https://famo.us/examples/0.2.0/core/context/context-in-existing-element","instruction":"Context inside of an existing element\n-------------------------------------\n\nA Famo.us Context can be applied to a pre-existing HTML element.\nNote: You may need to add properties from famous.css for your\ntargeted HTML element to respect Famo.us 3D primites.","javascript":"var Engine  = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\n\nvar el = document.createElement('div');\nel.id = 'test';\ndocument.body.appendChild(el);\n\nvar mainContext = Engine.createContext(el);\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nmainContext.add(surface);\n"},{"name":"setting-perspective","url":"https://famo.us/examples/0.2.0/core/context/setting-perspective","instruction":"Setting Perspective\n-------\n\nA context defines a 3D space in which HTML content can move. Setting the\nperspective of the context will provide a sense of depth.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/perspective\nfor an account on perspective.","javascript":"var Engine  = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\nvar Modifier = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nmainContext.setPerspective(200);\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nvar rotateX = new Modifier({\n    origin : [.5,.5],\n    transform : Transform.rotateX(Math.PI/4)\n});\n\nmainContext.add(rotateX).add(surface);\n"}],"engine":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/engine/example","instruction":"Engine\n------\n\nThe Famo.us Engine is responsible for managing the requestAnimationFrame loop,\ncreating Famo.us contexts, and listening to DOM events on the window. The\nEngine is a JavaScript singleton: there is only one instance per app.","javascript":"var Engine  = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [undefined, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        textAlign: \"center\"\n    }\n});\n\nmainContext.add(surface);\n\n// listen on window resize\nEngine.on(\"resize\", function() {\n    surface.setContent(\n        'dimensions:' + '<br>' +\n        'width : ' + window.innerWidth  + 'px ' + '<br>' +\n        'height: ' + window.innerHeight + 'px'\n    );\n});\n\n// listen on click\nEngine.on(\"click\", function(event){\n    surface.setContent(\n        'click position:' + '<br>' +\n        'x :' + event.clientX + 'px ' + '<br>' +\n        'y :' + event.clientY + 'px'\n    );\n});\n\n// exectute function on next requestAnimationFrame cycle\nEngine.nextTick(function() {\n    surface.setContent(\"Try resizing the device/window or clicking somewhere!\");\n});\n"}],"eventhandler":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/eventhandler/example","instruction":"EventHandler\n------------\n\nEventHandler is a way to broadcast and listen to events.\n\nIn this example, we pipe the DOM events of the surface to the\nEventHandler.  When we then click the surface, the event handler\nreceives that event and calls all of the listeners of the \"click\"\nevent.","javascript":"var Engine       = require('famous/core/Engine');\nvar EventHandler = require('famous/core/EventHandler');\nvar Surface      = require('famous/core/Surface');\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Click Me\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nvar eventHandler = new EventHandler();\n\nsurface.pipe(eventHandler);\n\neventHandler.on('click', function() {\n    alert('Click from the event handler');\n});\n\nmainContext.add(surface);\n"},{"name":"trigger","url":"https://famo.us/examples/0.2.0/core/eventhandler/trigger","instruction":"EventHandler triggering\n-----------------------\n\nThis example shows the most basic functionality of EventHandler.\nFirst, we register a function to be run on the \"click\" event.\nWhen the event handler gets the surface click, we trigger \"triggeredEvent\",\nwhich will call all of the register listeners resulting in the alert.","javascript":"var Engine       = require('famous/core/Engine');\nvar EventHandler = require('famous/core/EventHandler');\nvar Surface      = require('famous/core/Surface');\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Click Me\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nvar eventHandler = new EventHandler();\n\nsurface.pipe(eventHandler);\n\neventHandler.on('click', function() {\n    eventHandler.trigger('triggeredEvent', {data: 'I am the data'});\n});\n\neventHandler.on('triggeredEvent', function(data) {\n    alert(data.data);\n});\n\nmainContext.add(surface);\n\n"}],"modifier":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/modifier/example","instruction":"Modifier\n--------\n\nModifiers are Famo.us nodes that can be added to the render tree which affect\nthe appearance of the nodes below. Modifiers can apply a CSS3 3D\ntransform (translation, rotation, scale or skew), or an opacity. Modifiers also\naffect layout primitives by defining a size context (bounding box) and origin.\n\nIn this example, we can see that the surface is translated 50\npixels right and 50 pixels down because it sits below the\nmodifier in the render tree.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar transform = new Modifier({\n    transform: Transform.translate(50, 50, 0)\n});\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nmainContext.add(transform).add(surface);\n"},{"name":"chaining","url":"https://famo.us/examples/0.2.0/core/modifier/chaining","instruction":"Modifier chaining\n------------------\n\nWhen you chain modifiers all of them will be applied to \nany children in the render tree.  The order in which you add\nthe modifiers matters.  Translating and then rotating is not the same as\nrotating and then translating.\n\nIn this example, we can see that the two surfaces are laid out\ndifferently because one has its translation happen before its rotation,\nand the reverse is true for the other.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar modifierOne = new Modifier({\n    transform: Transform.translate(200, 0, -1)\n});\n\nvar modifierTwo = new Modifier({\n    transform: Transform.rotateZ(0.7)\n});\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Translate then rotate\",\n    classes: [\"red-bg\"],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '200px'\n    }\n});\n\nvar modifierThree = new Modifier({\n    transform: Transform.rotateZ(0.7)\n});\n\nvar modifierFour = new Modifier({\n    transform: Transform.translate(200, 0, 0)\n});\n\nvar surfaceTwo = new Surface({\n    size: [200, 200],\n    content: \"Rotate then translate\",\n    classes: [\"grey-bg\"],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '200px'\n    }\n});\n\nmainContext.add(modifierOne).add(modifierTwo).add(surface);\nmainContext.add(modifierThree).add(modifierFour).add(surfaceTwo);\n"},{"name":"branching","url":"https://famo.us/examples/0.2.0/core/modifier/branching","instruction":"Modifier branching\n------------------\n\nModifiers only affect Famo.us nodes beneath them in the render tree.\n\nIn this example, we can see that both surfaces are affected by\nmodifierOne, but only the smaller gray surface is affected by\nthe translation.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar modifierOne = new Modifier({\n    transform: Transform.rotateZ(0.7),\n    origin: [0.5, 0.5]\n});\n\nvar modifierTwo = new Modifier({\n    transform: Transform.translate(200, 0, 0)\n});\n\nvar surfaceOne = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '200px'\n    }\n});\n\nvar surfaceTwo = new Surface({\n    size: [50, 50],\n    content: \"Small\",\n    classes: [\"grey-bg\"],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '50px'\n    }\n});\n\nvar node = mainContext.add(modifierOne)\nnode.add(surfaceOne);\nnode.add(modifierTwo).add(surfaceTwo);    \n"},{"name":"size","url":"https://famo.us/examples/0.2.0/core/modifier/size","instruction":"Modifier with size\n------------------\n\nModifiers have a size property that will affect any children\nthat depend on the size or origin of the parent. Size can be thought of as\na \"bounding box\" from which an origin and node size is relative to.\n\nIn this example, we have a surface whose size is [undefined, undefined].\nFamo.us will then size the surface relative to the last defined size context.\nSince we include a modifier with size of [200,200] before the surface, the surface\nis sized to [200,200].\n\nTo demonstrate origin relative to a size context, we have defined a rotation\nabout the center of a [200,200] bounding box, so that our surface rotates about\nits center, as opposed to the default origin [0,0] (top left corner).","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar sizeMod = new Modifier({\n    size: [200, 200]\n});\n\nvar rotateMod = new Modifier({\n    origin : [.5,.5],\n    transform : Transform.rotateZ(Math.PI/4)\n});\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\n\nmainContext.add(sizeMod).add(rotateMod).add(surface);\n"},{"name":"origin","url":"https://famo.us/examples/0.2.0/core/modifier/origin","instruction":"Modifier with origin\n--------------------\n\nModifiers have an origin property which affects the positioning\nof children in the render tree.  By default, modifiers have an\norigin of [0, 0], which means child nodes are positioned at the top left of\nthe last defined size (defaulting to the window's size). By modifying origin,\nchild nodes can be layed out relative to a different origin (such as the center)\nof their parent's size context. This is similar in spirit to how the CSS float\nproperty behaves.\n\nFamo.us will internally ensure consistency of size and origin even when\nthe window is resized, or a mobile device changes its orientation.\n\nIn the example below, nine surfaces are placed inside of a Famo.us context,\nsized of the entire window (by default).  By modifying origins, these surfaces\ncan be layed out at key positions of their sizing context.","javascript":"var Engine   = require(\"famous/core/Engine\");\nvar Surface  = require(\"famous/core/Surface\");\nvar Modifier = require(\"famous/core/Modifier\");\n\nvar mainContext = Engine.createContext();\n\nvar origins = {\n    'topLeft':      [ 0,  0],\n    'topCenter':    [.5,  0],\n    'topRight':     [ 1,  0],\n    'centerLeft':   [ 0, .5],\n    'center':       [.5, .5],\n    'centerRight':  [ 1, .5],\n    'bottomLeft':   [ 0,  1],\n    'bottomCenter': [.5,  1],\n    'bottomRight':  [ 1,  1]\n};\n\nfor (var key in origins) {\n    var modifier = new Modifier({\n        origin: origins[key]\n    });\n\n    var surface = new Surface({\n        size: [100, 100],\n        content: key,\n        classes: ['red-bg'],\n        properties: {\n            lineHeight: '100px',\n            textAlign: 'center'\n        }\n    });\n\n    mainContext.add(modifier).add(surface);\n}\n"},{"name":"opacity","url":"https://famo.us/examples/0.2.0/core/modifier/opacity","instruction":"Modifier with opacity\n---------------------\n\nModifiers have an opacity property.  By setting the opacity\nof a modifier, all renderables below the modifier in the\nrender tree will have their opacity's affected multiplicatively.\n\nIn this example we have one surface being affected by a .5\nopacity modifier and another surface that is affected by that\nsame modifier plus an additional .25 opacity modifier which\nresults in an opacoty of .125.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar halfOpacityMod = new Modifier({\n    opacity: 0.5\n});\n\nvar quarterOpacity = new Modifier({\n    transform: Transform.translate(100, 0, 0),\n    opacity: 0.25\n});\n\nvar surfaceOne = new Surface({\n    size: [100, 100],\n    content: \"Half\",\n    classes: [\"red-bg\"],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar surfaceTwo = new Surface({\n    size: [100, 100],\n    content: \".125 Opacity\",\n    classes: [\"red-bg\"],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar halfOpacity = mainContext.add(halfOpacityMod);\nhalfOpacity.add(surfaceOne);\nhalfOpacity.add(quarterOpacity).add(surfaceTwo);\n"}],"scene":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/scene/example","instruction":"Scene\n--------\n\nScene is a way of defining a complex layout in JSON format.\nComponents of that layout can be accessed by their unique identifier (id).\nThe JSON defining the layout can be modified dynamically by the Scene's load\nfunction.\n\nIn the example, a Scene is created with a complex layout of\ntransforms and surfaces.","javascript":"var Engine     = require(\"famous/core/Engine\");\nvar Surface    = require(\"famous/core/Surface\");\nvar Scene      = require(\"famous/core/Scene\");\nvar Transform  = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar myScene = new Scene({\n    id: \"root\",\n    opacity: 1,\n    target: [\n        {\n            transform: Transform.translate(10, 10),\n            target: {id: \"foo\"}\n        },\n        {\n            transform: [\n                {rotateZ: 0.1},\n                {scale: [0.5, 0.5, 1]}\n            ],\n            origin: [0.5, 0.5],\n            target: {id: \"bar\"}\n        }\n    ]\n});\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nvar surfaceTwo = new Surface({\n    size: [200, 200],\n    content: \"Secondary\",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nmyScene.id[\"foo\"].add(surface);\nmyScene.id[\"bar\"].add(surfaceTwo);\n\nmainContext.add(myScene);\n"}],"surface":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/surface/example","instruction":"Surface\n---------\n\nA Famo.us Surface is loosely coupled to an HTML <div> on screen. A Surface\ncan take in any valid HTML as content.\n\nA popular question to ask is, when should I craete multiple surfaces, versus\npopulating a single surface with more HTML content? The answer hinges on animating\ncontent, versus static content. If your content is dynamically changing, create\na Surface for it. If your content is static (or rarely changing) HTML,\npopulate a Surface with it.\n\nIn this example, a single surface with\nsome properties is set and add to the render tree.","javascript":"var Engine  = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nmainContext.add(surface);\n"},{"name":"true-sizing","url":"https://famo.us/examples/0.2.0/core/surface/true-sizing","instruction":"Surface with true sizing\n------------------------\n\nA surface can have its size set to \"true\".  This will size the surface\naccording to the size of its contents.\n\nIn this example, a surface is created that is sized to its textual content.","javascript":"var Engine  = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [true, true],\n    content: \"Hello World\",\n    classes: [\"red-bg\"]\n});\n\nmainContext.add(surface);\n"}],"transform":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/transform/example","instruction":"Transform\n---------\n\nA Famo.us Transform corresponds to a CSS3 3D transform.\n\nSee: https://developer.mozilla.org/en-US/docs/Web/CSS/transform\n\nWith transforms you can affect the translation, rotation, scale, or skew of a\nFamo.us renderable, e.g., a Famo.us Surface.\n\nTransforms are generally parameters to Famo.us modifiers which apply the\ntransform to its children.\n\nIn this example, a Transform corresponding to a rotation of 45 degreees\nis created and applied to a surface via a Famo.us Modifier.\n\nTODO: add example with a transitioning transform","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar rotateModifier = new Modifier({\n    transform: Transform.rotateZ(Math.PI/4)\n});\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\n\nmainContext.add(rotateModifier).add(surface);\n"}],"view":[{"name":"example","url":"https://famo.us/examples/0.2.0/core/view/example","instruction":"View\n-------\n\nView is one of the core components of Famo.us.  A view is \na way to encapsulate modifiers, surfaces, and other views \ninto a single view so they can be treated as a simgle component.\n\nViews also have dual EventHandlers for controlling the input\nand output of events and an OptionsManager for dealing with \nrecursive options passing.\n\nIn this example, you can see that once the surfaces are added \nand have their output piped to the view, you no longer have\nto deal with the surfaces themselves and just deal with the\nview itself.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar View      = require(\"famous/core/View\");\nvar Surface   = require(\"famous/core/Surface\");\nvar Modifier  = require(\"famous/core/Modifier\");\nvar Transform = require(\"famous/core/Transform\");\n\nvar mainContext = Engine.createContext();\n\nvar view = new View();\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: \"Hello World\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\nsurface.pipe(view);\n\nview._eventInput.on(\"click\", function() {\n    alert(\"Primary Surface Clicked\");\n});\n\nvar viewTwo = new View();\n\nvar mod = new Modifier({\n    transform: Transform.thenMove(Transform.rotateZ(Math.PI * 0.25),[200, 100, 1])\n});\n\nvar surfaceTwo = new Surface({\n    size: [200, 200],\n    content: \"Secondary\",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: \"200px\",\n        textAlign: \"center\"\n    }\n});\nsurfaceTwo.pipe(viewTwo);\n\nviewTwo._eventInput.on(\"click\", function() {\n    alert(\"Secondary Surface Clicked\");\n});\n\nview._add(surface);\nviewTwo._add(mod).add(surfaceTwo);\n\nmainContext.add(view);\nmainContext.add(viewTwo);\n"}],"eventarbiter":[{"name":"example","url":"https://famo.us/examples/0.2.0/events/eventarbiter/example","instruction":"EventArbiter\n-------------\n\nEventArbiter is a way to route events based on a \nparticular mode.  Each mode can have at most one\nevent handler that handles the events when the \nEventArbiter is in that mode.\n\nIn this example, we have two event handlers: one for mode A\nand one for mode B.  Every time we click we are changing the\nmode of the EventArbiter and thus toggling which EventHandlers\nare getting the events.","javascript":"var Engine       = require('famous/core/Engine');\nvar EventArbiter = require('famous/events/EventArbiter');\n\nvar MODES = {\n    A: 'A',\n    B: 'B'\n};\n\nvar eventArbiter = new EventArbiter(MODES.A);\n\nvar AHandler = eventArbiter.forMode(MODES.A);\nAHandler.on('my_event', function(event) { \n    alert('AHandler'); \n});\n\nvar BHandler = eventArbiter.forMode(MODES.B)\nBHandler.on('my_event', function(event) { \n    alert('BHandler'); \n});\n\nvar currentMode = 'A';\nEngine.on('click', function() {\n    eventArbiter.emit('my_event', {data: 123});\n    currentMode = currentMode === 'A' ? 'B' : 'A';\n    eventArbiter.setMode(currentMode);\n});\n"}],"eventfilter":[{"name":"pipe-filter","url":"https://famo.us/examples/0.2.0/events/eventfilter/pipe-filter","instruction":"EventFilter with piping\n-----------------------\n\nEventFilter provides a way to define a function that \ncan decide whether or not to propogate events downwards.\n\nIn this example, we pipe all events from eventHandlerA to\nthe EventFilter.  This filter will only propogate events\nif the data's 'msg' property is 'ALERT!'.  Because we change\nthe msg that is broadcast every click, you can see that the\nalert occurs every other click.","javascript":"var Engine       = require('famous/core/Engine');\nvar EventHandler = require('famous/core/EventHandler');\nvar EventFilter  = require('famous/events/EventFilter');\n\nvar eventHandlerA = new EventHandler();\nvar eventHandlerB = new EventHandler();\n   \nvar myFilter = new EventFilter(function(type, data) {\n    return data && (data.msg === 'ALERT!');\n});\n\neventHandlerA.pipe(myFilter).pipe(eventHandlerB);\neventHandlerB.on('A', function(data){\n    alert('piped message: ' + data.msg);\n});\n\nvar currentMsg = 'ALERT!';\n\nEngine.on('click', function() {\n    eventHandlerA.trigger('A', {msg: currentMsg});\n    currentMsg = currentMsg === 'ALERT!' ? 'chickenDogStar': 'ALERT!';\n});\n"},{"name":"subscribe-filter","url":"https://famo.us/examples/0.2.0/events/eventfilter/subscribe-filter","instruction":"EventFilter with subscription\n-----------------------------\n\nEventFilter provides a way to define a function that \ncan decide whether or not to propogate events downwards.\n\nIn this example, eventHandlerB is subscribed to all events coming\nout of the filter and the filter is subscribed to all events\ncoming out of eventHandlerA.  This filter will only propogate events\nif the data's 'msg' property is 'ALERT!'.  Because we change\nthe msg that is broadcast every click, you can see that the\nalert occurs every other click.","javascript":"var Engine       = require('famous/core/Engine');\nvar EventHandler = require('famous/core/EventHandler');\nvar EventFilter  = require('famous/events/EventFilter');\n\nvar eventHandlerA = new EventHandler();\nvar eventHandlerB = new EventHandler();\n   \nvar myFilter = new EventFilter(function(type, data) {\n    return data && (data.msg === 'ALERT!');\n});\n\neventHandlerB.subscribe(myFilter);\nmyFilter.subscribe(eventHandlerA);\neventHandlerB.on('A', function(data){\n    alert('subscribed message: ' + data.msg);\n});\n\nvar currentMsg = 'ALERT!';\n\nEngine.on('click', function() {\n    eventHandlerA.trigger('A', {msg: currentMsg});\n    currentMsg = currentMsg === 'ALERT!' ? 'chickenDogStar': 'ALERT!';\n});\n"}],"eventmapper":[{"name":"example","url":"https://famo.us/examples/0.2.0/events/eventmapper/example","instruction":"EventMapper\n------------\n\nEventMapper is a way to route events to various EventHandlers\nbased on the type of the event.\n\nIn this example, we pipe all events from eventHandlerA to\nthe EventMapper.  This filter will decide whether to send\nthe event to eventHandlerB or eventHandlerC based on the\ndirection property of the data sent along with the event.","javascript":"var Engine       = require('famous/core/Engine');\nvar EventHandler = require('famous/core/EventHandler');\nvar EventMapper  = require('famous/events/EventMapper');\n   \nvar eventHandlerA = new EventHandler();\nvar eventHandlerB = new EventHandler();\nvar eventHandlerC = new EventHandler();\n  \nvar myMapper = new EventMapper(function(type, data) {\n    return (data && (data.direction === 'x')) ? eventHandlerB : eventHandlerC;\n});\n\neventHandlerA.pipe(myMapper);\n\neventHandlerB.on('A', function(data){\n    alert('B direction : ' + data.direction);\n});\neventHandlerC.on('A', function(data){\n    alert('C direction : ' + data.direction);\n});\n\nvar currentDirection = 'x';\nEngine.on('click', function() {\n    eventHandlerA.trigger('A', {direction : currentDirection});\n    currentDirection = currentDirection === 'x' ? 'y' : 'x';\n});\n"}],"genericsync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/genericsync/example","instruction":"GenericSync\n------------\n\nGenericSync combines multiple types of event handling \n(e.g. touch, trackpad scrolling) into one standardized \ninterface for inclusion in widgets. TouchSync and ScrollSync\nare enabled by default.\n\nIn this example, we create a GenericSync that listens to\nTouchSync, ScrollSync, and MouseSync and displays the data\nit receives to the screen.","javascript":"var Engine      = require(\"famous/core/Engine\");\nvar GenericSync = require(\"famous/inputs/GenericSync\");\nvar MouseSync   = require(\"famous/inputs/MouseSync\");\nvar TouchSync   = require(\"famous/inputs/TouchSync\");\nvar ScrollSync  = require(\"famous/inputs/ScrollSync\");\nvar Surface     = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\nvar position = [0, 0];\n\nvar genericSync = new GenericSync(function() {\n    return [0, 0];\n}, {\n    syncClasses: [MouseSync, TouchSync, ScrollSync]\n});\nEngine.pipe(genericSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" + \n    \"<div>Update Count: \" + update + \"</div>\" +\n    \"<div>Distance away from mousedown/touch origin:<br>\" + position + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: ['grey-bg'],\n    content: contentTemplate()\n});\n\ngenericSync.on(\"start\", function() {\n    start++;\n    position = [0, 0];\n    surface.setContent(contentTemplate());\n});\n\ngenericSync.on(\"update\", function(data) {\n    update++;\n    position[0] += data.position[0];\n    position[1] += data.position[1]; \n    surface.setContent(contentTemplate());\n});\n\ngenericSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"}],"mousesync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/mousesync/example","instruction":"MouseSync\n------------\n\nMouseSync handles mouse drag events. It outputs an object with two\nproperties: position and velocity.\n\nIn this example, we create a MouseSync and display the data\nit receives to the screen.  Based on the update information,\nwe can determine how far away from the mousedown event location\nwe are when we are dragging.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar MouseSync = require(\"famous/inputs/MouseSync\");\nvar Surface   = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\n\nvar position = [0, 0];\nvar mouseSync = new MouseSync(function() {\n    return position;\n});\n\nEngine.pipe(mouseSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" +\n    \"<div>Update Count: \" + update + \"</div>\" +\n    \"<div>Distance away from mousedown origin:<br>\" + position + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: [\"grey-bg\"],\n    content: contentTemplate()\n});\n\nmouseSync.on(\"start\", function() {\n    start++;\n    position = [0, 0];\n    surface.setContent(contentTemplate());\n});\n\nmouseSync.on(\"update\", function(data) {\n    update++;\n    position[0] += data.position[0];\n    position[1] += data.position[1];\n    surface.setContent(contentTemplate());\n});\n\nmouseSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"},{"name":"single-dimensional","url":"https://famo.us/examples/0.2.0/inputs/mousesync/single-dimensional","instruction":"MouseSync\n------------\n\nFamo.us syncs default to track two-dimensional movement,\nbut can be passed as optional direction parameter to restrict\nmovement to a single axis.\n\nIn this example, we create a MouseSync but only track the x-axis\nchanges on mouse drag.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar MouseSync = require(\"famous/inputs/MouseSync\");\nvar Surface   = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\n\nvar x = 0;\nvar y = 0;\nvar position = [x, y];\n\nvar mouseSync = new MouseSync(function() {\n    return x;\n}, {direction : MouseSync.DIRECTION_X});\n\nEngine.pipe(mouseSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n           \"<div>End Count: \" + end + \"</div>\" +\n           \"<div>Update Count: \" + update + \"</div>\" +\n           \"<div>Distance away from mousedown origin:<br>\" + position + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: [\"grey-bg\"],\n    content: contentTemplate()\n});\n\nmouseSync.on(\"start\", function() {\n    start++;\n    position = [x, y];\n    surface.setContent(contentTemplate());\n});\n\nmouseSync.on(\"update\", function(data) {\n    update++;\n    position[0] += data.position;\n    surface.setContent(contentTemplate());\n});\n\nmouseSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"}],"pinchsync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/pinchsync/example","instruction":"PinchSync\n------------\n\nPinchSync handles piped-in two-finger touch events to change\nposition via pinching / expanding. It outputs an object with\nposition, velocity, touch IDs, and distance.\n\nIn this example, we create a PinchSync and display the data\nit receives to the screen.  Based on the data, we can decide if\nit is pinching or expanding.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar Surface   = require(\"famous/core/Surface\");\nvar PinchSync = require(\"famous/inputs/PinchSync\");\n\nvar mainCtx = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\nvar direction = \"\";\nvar distance = 0;\n\nvar pinchSync = new PinchSync(function() {\n    return [0, 0];\n});\nEngine.pipe(pinchSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" +\n    \"<div>Update Count: \" + update + \"</div>\" +\n    \"<div>Pinch Direction: \" + direction + \"</div>\" +\n    \"<div>Finger Separation Distance:\" + distance + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: [\"grey-bg\"],\n    content: contentTemplate()\n});\n\npinchSync.on(\"start\", function() {\n    start++;\n    surface.setContent(contentTemplate());\n});\n\npinchSync.on(\"update\", function(data) {\n    update++;\n    distance = data.distance;\n    direction = data.velocity > 0 ? \"Expanding\" : \"Pinching\";\n    surface.setContent(contentTemplate());\n});\n\npinchSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainCtx.add(surface);\n"}],"rotatesync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/rotatesync/example","instruction":"RotateSync\n------------\n\nRotateSync handles piped-in two-finger touch events to support rotation.\nIt outputs an object with position, velocity, touches, and angle.\n\nIn this example, we create a RotateSync and display the data\nit receives to the screen.","javascript":"var Engine     = require(\"famous/core/Engine\");\nvar Surface    = require(\"famous/core/Surface\");\nvar RotateSync = require(\"famous/inputs/RotateSync\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\nvar direction = \"\";\nvar angle = 0;\n\nvar rotateSync = new RotateSync(function() {\n    return [0, 0];\n});\n\nEngine.pipe(rotateSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" +\n    \"<div>Update Count: \" + update + \"</div>\" +\n    \"<div>Direction: \" + direction + \"</div>\" +\n    \"<div>Angle: \" + angle + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: ['grey-bg'],\n    content: contentTemplate()\n});\n\nrotateSync.on(\"start\", function() {\n    start++;\n    angle = 0;\n    surface.setContent(contentTemplate());\n});\n\nrotateSync.on(\"update\", function(data) {\n    update++;\n    direction = data.velocity > 0 ? \"Clockwise\" : \"Counter-Clockwise\";\n    angle = data.angle;\n    surface.setContent(contentTemplate());\n});\n\nrotateSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"}],"scalesync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/scalesync/example","instruction":"ScaleSync\n------------\n\nRotateSync handles piped in two-finger touch events to increase\nor decrease scale via pinching / expanding. It outputs an object\nwith position, velocity, touches, and distance.\n\nIn this example, we create a ScaleSync and displays the data\nit recieves to the screen.","javascript":"var Engine = require(\"famous/core/Engine\");\nvar Surface = require(\"famous/core/Surface\");\nvar ScaleSync = require(\"famous/inputs/ScaleSync\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\nvar growShrink = \"\";\n\nvar scaleSync = new ScaleSync(function() {\n    return [0,0];\n});\n\nEngine.pipe(scaleSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" +\n    \"<div>Update Count: \" + update + \"</div>\" +\n    \"<div>Scale Direction: \" + growShrink + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: ['grey-bg'],\n    content: contentTemplate()\n});\n\nscaleSync.on(\"start\", function() {\n    start++;\n    surface.setContent(contentTemplate());\n});\n\nscaleSync.on(\"update\", function(data) {\n    update++;\n    growShrink = data.velocity > 0 ? \"Growing\" : \"Shrinking\";\n    surface.setContent(contentTemplate());\n});\n\nscaleSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"}],"scrollsync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/scrollsync/example","instruction":"ScrollSync\n------------\n\nScrollSync handles piped in mousewheel events. Can be used\nas delegate of GenericSync.\n\nIn this example, we create a ScrollSync and displays the data\nit recieves to the screen.","javascript":"var Engine     = require(\"famous/core/Engine\");\nvar Surface    = require(\"famous/core/Surface\");\nvar ScrollSync = require(\"famous/inputs/ScrollSync\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\n\nvar scrollSync = new ScrollSync(function() {\n    return [0,0];\n});\n\nEngine.pipe(scrollSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" +\n    \"<div>Update Count: \" + update + \"</div>\";\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: ['grey-bg'],\n    content: contentTemplate()\n});\n\nscrollSync.on(\"start\", function() {\n    start++;\n    surface.setContent(contentTemplate());\n});\n\nscrollSync.on(\"update\", function(data) {\n    update++;\n    surface.setContent(contentTemplate());\n});\n\nscrollSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"}],"touchsync":[{"name":"example","url":"https://famo.us/examples/0.2.0/inputs/touchsync/example","instruction":"TouchSync\n------------\n\nTouchSync handles piped in touch events. On update it outputs an\nobject with position, velocity, acceleration, and touch id. On end\nit outputs an object with position, velocity, count, and touch.\n\nIn this example, we create a TouchSync and displays the data\nit recieves to the screen.","javascript":"var Engine    = require(\"famous/core/Engine\");\nvar TouchSync = require(\"famous/inputs/TouchSync\");\nvar Surface   = require(\"famous/core/Surface\");\n\nvar mainContext = Engine.createContext();\n\nvar start = 0;\nvar update = 0;\nvar end = 0;\nvar position = [0, 0];\n\nvar touchSync = new TouchSync(function() {\n    return position;\n});\n\nEngine.pipe(touchSync);\n\nvar contentTemplate = function() {\n    return \"<div>Start Count: \" + start + \"</div>\" +\n    \"<div>End Count: \" + end + \"</div>\" + \n    \"<div>Update Count: \" + update + \"</div>\" +\n    \"<div>Distance away from touch origin:<br>\" + position + \"</div>\"\n};\n\nvar surface = new Surface({\n    size: [undefined, undefined],\n    classes: ['grey-bg'],\n    content: contentTemplate()\n});\n\ntouchSync.on(\"start\", function() {\n    start++;\n    position = [0, 0];\n    surface.setContent(contentTemplate());\n});\n\ntouchSync.on(\"update\", function(data) {\n    update++;\n    position[0] += data.position[0];\n    position[1] += data.position[1]; \n    surface.setContent(contentTemplate());\n});\n\ntouchSync.on(\"end\", function() {\n    end++;\n    surface.setContent(contentTemplate());\n});\n\nmainContext.add(surface);\n"}],"matrix":[{"name":"example","url":"https://famo.us/examples/0.2.0/math/matrix/example","instruction":"Matrix\n-------\n\nMatrix is a library for creating a 3x3 matrix and applying\nvarious math operations to them such as multiplication\nor finding the transpose.\n\nIn this example we create a 3x3 matrix and multiply it by a\nunit vector to create the 3x1 matrix [0.707,0.707,0].","javascript":"// import dependencies\nvar Engine  = require('famous/core/Engine');\nvar Matrix  = require('famous/math/Matrix');\nvar Vector  = require('famous/math/Vector');\nvar Surface = require('famous/core/Surface');\n\nvar mainContext = Engine.createContext();\n\n// rotate 45 degrees about z axis\nvar matrix = new Matrix([\n   [ .707, -.707, 0],\n   [ .707, .707, 0],\n   [ 0, 0, 1]\n]);\n\nvar vector = new Vector(1, 0, 0);\nvar rotatedVector = matrix.vectorMultiply(vector);\n\nvar surface = new Surface({\n    size: [200, 200],\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\nsurface.setContent('[' + rotatedVector.get() + ']');\nmainContext.add(surface);\n"}],"quaternion":[{"name":"example","url":"https://famo.us/examples/0.2.0/math/quaternion/example","instruction":"Quaternion\n----------\n\nQuaternions are used to represent rotations.  It has two components,\nan axis represented by x, y, and z and the amount of rotation to\nbe applied around that axis, represented by w.  Quaternions are\nparticularly useful because they have no chance of gimbal lock.\n\nIn this example, we have a Quaternion that defined the surface's\nrotation.","javascript":"var Engine     = require('famous/core/Engine');\nvar Surface    = require('famous/core/Surface');\nvar Modifier   = require('famous/core/Modifier');\nvar Transform  = require('famous/core/Transform');\nvar Quaternion = require('famous/math/Quaternion');\n\nvar mainContext = Engine.createContext();\n\nvar quaternion = new Quaternion(Math.PI/3, .5, .5, 0);\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: 'Hello World',\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\n\nvar modifier = new Modifier();\nmodifier.transformFrom(function() {\n    return toggle ? Transform.identity : quaternion.getTransform();\n});\n\nmainContext.add(new Modifier({origin: [.5, .5]})).add(modifier).add(surface);\n\nvar toggle = true;\nEngine.on('click', function() {\n    toggle = toggle ? false : true;\n});\n"}],"random":[{"name":"example","url":"https://famo.us/examples/0.2.0/math/random/example","instruction":"Random\n-------\n\nRandom is a library for creating random integers,\nbooleans, ranges, and signs.\n\nIn this example we set the content based on the random\nboolean that is created.","javascript":"var Engine = require('famous/core/Engine');\nvar Random = require('famous/math/Random');\nvar Surface = require('famous/core/Surface');\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [200, 200],\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\nvar is_heads = Random.bool();\nsurface.setContent(is_heads ? 'Heads' : 'Tails');\n\nmainContext.add(surface);\n\nEngine.on('click', function() {\n    surface.setContent(Random.bool() ? 'Heads' : 'Tails');\n});\n"}],"vector":[{"name":"example","url":"https://famo.us/examples/0.2.0/math/vector/example","instruction":"Vector\n--------\n\nVector a way to create a three element float point vector.\n\nIn the example you can see how a Vector is affected when it\nis multiplied against a rotation matrix.","javascript":"// import dependencies\nvar Engine  = require('famous/core/Engine');\nvar Matrix  = require('famous/math/Matrix');\nvar Vector  = require('famous/math/Vector');\nvar Surface = require('famous/core/Surface');\n\nvar mainContext = Engine.createContext();\n\n// rotate 45 degrees about z axis\nvar matrix = new Matrix([\n   [ .707, -.707, 0],\n   [ .707, .707, 0],\n   [ 0, 0, 1]\n]);\n\nvar vector = new Vector(1, 0, 0);\nvar rotatedVector = matrix.vectorMultiply(vector);\n\nvar surface = new Surface({\n    size: [200, 200],\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\nsurface.setContent('[' + rotatedVector.get() + ']');\nmainContext.add(surface);\n"}],"draggable":[{"name":"example","url":"https://famo.us/examples/0.2.0/modifiers/draggable/example","instruction":"Draggable\n-----------\n\nDraggable is a modifier that allows a renderable to be\nresponsive to drag behavior.\n\nIn this example we can see that the red surface is draggable\nbecause it sits behind a draggable modifier.  It has boundaries\nand snaps because of the options set on the draggable modifier.","javascript":"var Engine    = require('famous/core/Engine');\nvar Surface   = require('famous/core/Surface');\nvar Modifier  = require('famous/core/Modifier');\nvar Transform = require('famous/core/Transform');\nvar Draggable = require('famous/modifiers/Draggable');\n\nvar mainContext = Engine.createContext();\n\n//show a grid for reference\nvar grid = new Surface({\n    size: [481,481],\n    classes: ['graph']\n});\n\n// TODO Fix github issue: https://github.com/Famous/modifiers/issues/7\nvar draggable = new Draggable( {\n    snapX: 40, \n    snapY: 40, \n    xRange: [-220, 220],\n    yRange: [-220, 220],\n});\n\nvar surface = new Surface({\n    size: [40, 40],\n    content: 'drag',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '40px',\n        textAlign: 'center',\n        cursor: 'pointer'\n    }\n });\nsurface.pipe(draggable);\nsurface.on('click', function() {\n    console.log('click')\n})\n\nvar node = mainContext.add(new Modifier({origin:[0.5,0.5]}));\nnode.add(grid);\nnode.add(draggable).add(surface);\n"}],"modifierchain":[{"name":"example","url":"https://famo.us/examples/0.2.0/modifiers/modifierchain/example","instruction":"ModifierChain\n-------------\n\nModifierChain is a class to add and remove a chain of modifiers\nat a single point in the render tree.  Because it add exists \nin a single element, it has slight performance benefits over \nchaining individual modifiers.\n\nIn the example, you can see that on the click event we are able\nto remove a modifier after it has been added to the render tree.","javascript":"var Engine        = require('famous/core/Engine');\nvar Modifier      = require('famous/core/Modifier');\nvar Surface       = require('famous/core/Surface');\nvar Transform     = require('famous/core/Transform');\nvar ModifierChain = require('famous/modifiers/ModifierChain');\n   \nvar mainContext = Engine.createContext();\n\nvar modifierChain = new ModifierChain();\n\nvar modifierOne = new Modifier({\n    origin: [0.5, 0.5]\n});\n\nvar modifierTwo = new Modifier({\n    transform: Transform.translate(0, 100, 0)\n});\n\nvar surface = new Surface({\n    size: [200, true],\n    content: \"Click me to remove the center origin modifier\",\n    classes: [\"red-bg\"],\n    properties: {\n        textAlign: \"center\",\n    }\n});\n\nmodifierChain.addModifier(modifierOne);\nmodifierChain.addModifier(modifierTwo);\nmainContext.add(modifierChain).add(surface);\n\nsurface.on('click', function() {\n    modifierChain.removeModifier(modifierOne);\n    surface.setContent('Success!');\n});\n"}],"containersurface":[{"name":"example","url":"https://famo.us/examples/0.2.0/surfaces/containersurface/example","instruction":"ContainerSurface\n----------------\nContainerSurface is an object designed to contain surfaces and \nset properties to be applied to all of them at once.\nA container surface will enforce these properties on the \nsurfaces it contains:\n\n- size (clips contained surfaces to its own width and height)\n\n- origin\n\n- its own opacity and transform, which will be automatically \n  applied to  all Surfaces contained directly and indirectly.\n\nIn this example we have a ContainerSurface that contains a Scrollview.\nBecause the ContainerSurface creates it's own context the\nScrollview will behave accoriding to the size of the ContainerSurface\nit exists within.  The ContainerSurface having the an overflow of\n'hidden' means that the scrollview overflow will be hidden.","javascript":"var Engine           = require(\"famous/core/Engine\");\nvar Surface          = require(\"famous/core/Surface\");\nvar Modifier         = require(\"famous/core/Modifier\");\nvar ContainerSurface = require(\"famous/surfaces/ContainerSurface\");\nvar Scrollview       = require(\"famous/views/Scrollview\");\n\nvar mainContext = Engine.createContext();\n\nvar container = new ContainerSurface({\n    size: [400, 400],\n    properties: {\n        overflow: 'hidden'\n    }\n});\n\nvar surfaces = [];\nvar scrollview = new Scrollview();\n\nvar temp;\nfor (var i = 0; i < 100; i++) {\n    temp = new Surface({\n        size: [undefined, 50],\n        content: 'I am surface: ' + (i + 1),\n        classes: ['red-bg'],\n        properties: {\n            textAlign: 'center',\n            lineHeight: '50px'\n        }\n    });\n\n    temp.pipe(scrollview);\n    surfaces.push(temp);\n}\n\nscrollview.sequenceFrom(surfaces);\ncontainer.add(scrollview);\n\nmainContext.add(new Modifier({origin: [.5, .5]})).add(container);\n"}],"imagesurface":[{"name":"example","url":"https://famo.us/examples/0.2.0/surfaces/imagesurface/example","instruction":"ImageSurface\n------------\n\nImageSurface is the same interface as a regular Surface\nexcept that it will create an img tag instead of a\ndiv tag.  When you call setContent on an ImageSurface,\nit will chage the src property of the tag.\n\nIn this example we have an ImageSurface with the\nFamo.us logo as it's content.","javascript":"var Engine       = require(\"famous/core/Engine\");\nvar Modifier     = require(\"famous/core/Modifier\");\nvar ImageSurface = require(\"famous/surfaces/ImageSurface\");\n\nvar mainCtx = Engine.createContext();\n\nvar image = new ImageSurface({\n    size: [200, 200]\n});\n\nimage.setContent(\"content/famous_symbol.svg\");\n\nmainCtx.add(new Modifier({origin: [.5, .5]})).add(image);\n"}],"inputsurface":[{"name":"example","url":"https://famo.us/examples/0.2.0/surfaces/inputsurface/example","instruction":"InputSurface\n------------\n\nImageSurface is the same interface as a regular Surface\nexcept that it will create an input tag instead of a\ndiv tag.  It also exposes an interface for defining\ninput specific properites such as name, placeholder, value,\nand type.\n\nIn this example we have an InputSurface to insert\ntext.","javascript":"var Engine       = require(\"famous/core/Engine\");\nvar Modifier     = require(\"famous/core/Modifier\");\nvar InputSurface = require(\"famous/surfaces/InputSurface\");\n\nvar mainCtx = Engine.createContext();\n\nvar input = new InputSurface({\n    size: [200, 200],\n    name: 'inputSurface',\n    placeholder: 'Type text here',\n    value: '',\n    type: 'text'\n});\n\nmainCtx.add(new Modifier({origin: [.5, .5]})).add(input);\n"}],"easing":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/easing/example","instruction":"Easing\n--------\n\nEasing is a library of curves which map an animation\nexplicitly as a function of time.\n\nIn this example we have a red ball that transitions from\nthe top of the box to the middle based on various easing\ncurves.","javascript":"var Engine           = require(\"famous/core/Engine\");\nvar Surface          = require(\"famous/core/Surface\");\nvar Modifier         = require(\"famous/core/Modifier\");\nvar Transform        = require(\"famous/core/Transform\");\nvar Transitionable   = require(\"famous/transitions/Transitionable\");\nvar Easing           = require(\"famous/transitions/Easing\");\nvar ContainerSurface = require(\"famous/surfaces/ContainerSurface\");\nvar ScrollView       = require(\"famous/views/ScrollView\");\n\n// create the main context\nvar mainContext = Engine.createContext();\n\n   //create the dot\nvar surface = new Surface({\n    size:[100,100],\n    classes: ['red-bg']\n});\n\nvar modifier = new Modifier({\n    origin: [.5,.5],\n    transform: Transform.translate(100,-240,0)\n});\n\nmainContext.add(modifier).add(surface);\n\n//This is where the meat is\nfunction _playCurve(curve){\n    modifier.setTransform(Transform.translate(100,-240,0));\n    modifier.setTransform(\n        Transform.translate(100,0,0), \n        { curve: curve, duration: 1000}\n    );\n}\n\n//Create a scroll view to let the user play with the different easing curves available.\nvar curves = [];\nfor(var curve in Easing){\n    var surface = new Surface({\n        size:[200,40],\n        content: \"<h3>\" + curve + \"</h3>\",\n        properties: {color:\"#3cf\"}\n    });\n\n    curves.push(surface);\n    surface.on(\"click\", \n        _playCurve.bind(null, Easing[curve])\n    );\n}\n\n//this will hold and clip the scroll view\nvar scrollContainer = new ContainerSurface({\n    size: [200,480],\n    properties: {\n        overflow:\"hidden\",\n        border: \"1px solid rgba(255,255,255, .8)\",\n        borderRadius: \"10px 0px 0px 10px\"\n    }\n});\n\n//the actual scroll view\nvar scrollView = new ScrollView({\n    clipSize: 460\n});\n\n//set where the items come from \nscrollView.sequenceFrom(curves);\n\n//give the scroll view input\nscrollContainer.pipe(scrollView);\n\n//add the scrollview to the scroll container\nscrollContainer.add(new Modifier({transform: Transform.translate(20,0,0)})).add(scrollView);\n\n//finally add the scroll container to the context\nmainContext.add(new Modifier({origin: [.5,.5], transform: Transform.translate(-240,0,0)})).add(scrollContainer);\n"}],"snaptransition":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/snaptransition/example","instruction":"SnapTransition\n----------------\n\nSnapTransition is a method of transitioning between two values (numbers,\nor arrays of numbers). It is similar to SpringTransition except\nthe transition can be much faster and always has a damping effect.\n\nIn this example you can see a surface attached to a SnapTransition.","javascript":"// import dependencies\nvar Engine         = require(\"famous/core/Engine\");\nvar Surface        = require(\"famous/core/Surface\");\nvar Modifier       = require(\"famous/core/Modifier\");\nvar Transform      = require(\"famous/core/Transform\");\nvar Transitionable = require(\"famous/transitions/Transitionable\");\nvar SnapTransition = require(\"famous/transitions/SnapTransition\");\n \n// create the main context\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size:[100,100],\n    content: 'Click Me',\n    classes: ['red-bg'],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar modifier = new Modifier({\n    origin: [.5,.5],\n    transform: Transform.translate(0,-240,0)\n});\n\nvar mod2 = new Modifier({\n    transform: Transform.rotateX(0.2)\n});\n\nTransitionable.registerMethod('snap', SnapTransition);\nvar transition = {\n    method: \"snap\",\n    period: 1000,\n    dampingRatio: .3,\n    velocity: 0\n};\n\nsurface.on(\"click\", function(){\n    modifier.setTransform(Transform.translate(0,0,0),transition);\n});\n\nmainContext.add(modifier).add(mod2).add(surface);\n"}],"springtransition":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/springtransition/example","instruction":"SpringTransition\n--------\n\nSpringTransition is a method of transitioning between two values (numbers,\nor arrays of numbers) with a bounce. The transition will overshoot the target\nstate depending on the parameters of the transition.\n\nIn this example, there is a surface attached to a SpringTransition.","javascript":"var Engine              = require(\"famous/core/Engine\");\nvar Surface          = require(\"famous/core/Surface\");\nvar Modifier         = require(\"famous/core/Modifier\");\nvar Transform          = require(\"famous/core/Transform\");\nvar Transitionable   = require(\"famous/transitions/Transitionable\");\nvar SpringTransition = require(\"famous/transitions/SpringTransition\");\n\n// create the main context\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size:[100,100],\n    content: 'Click Me',\n    classes: ['red-bg'],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar modifier = new Modifier({\n    origin: [.5,.5],\n    transform: Transform.translate(0,-240,0)\n});\n\nTransitionable.registerMethod('spring', SpringTransition);\nvar transition = {\n    method: \"spring\",\n    period: 1000,\n    dampingRatio: .1,\n    velocity: 0\n\n}\n\nsurface.on(\"click\", function(){\n    modifier.setTransform(Transform.translate(0,0,0),transition);\n});\n\nmainContext.add(modifier).add(surface);\n\n"}],"transitionable":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/transitionable/example","instruction":"Transitionable\n--------\n\nTransitionable is  state maintainer for a smooth transition between\nnumerically-specified states. Example numeric states include floats or\nMatrix objects. Transitionables form the basis\nof Transform objects.","javascript":"var Engine         = require(\"famous/core/Engine\");\nvar Surface        = require(\"famous/core/Surface\");\nvar Modifier       = require(\"famous/core/Modifier\");\nvar Transform      = require(\"famous/core/Transform\");\nvar Timer          = require(\"famous/utilities/Timer\");\nvar Transitionable = require(\"famous/transitions/Transitionable\");\n\n// create the main context\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size:[100,100],\n    content: 'Click Me',\n    classes: ['red-bg'],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\n//set the initial value of the transtionable to the left side of the screen\nvar maxOffset = 100;\n\n//create our transitionable\nvar transitionable = new Transitionable(-maxOffset);\n\n//this controls the position of surface\nvar modifier = new Modifier({\n    origin: [.5,.5]\n});\n\nmodifier.transformFrom(function() {\n    return Transform.translate(transitionable.get(), 0, 0);\n});\n\nsurface.on(\"click\", function(){\n    transitionable.set(maxOffset, {curve: \"easeInOut\", duration: 1000});\n});\n\nmainContext.add(modifier).add(surface);\n"}],"transitionabletransform":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/transitionabletransform/example","instruction":"TransitionableTransform\n--------\n\nTransitionableTransform is a class for transitioning \nthe state of a Transform by transitioning its translate,\nscale, skew and rotate components independently.\n\nIn this example, there is a surface having its scale\naffected by a TransitionableTransform.","javascript":"var Engine                  = require(\"famous/core/Engine\");\nvar Surface                 = require(\"famous/core/Surface\");\nvar Modifier                = require(\"famous/core/Modifier\");\nvar TransitionableTransform = require(\"famous/transitions/TransitionableTransform\");\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size:[100,100],\n    content: 'Click Me',\n    classes: ['red-bg'],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar transitionableTransform = new TransitionableTransform();\n\nvar modifier = new Modifier({\n    origin: [.5,.5],\n    transform: transitionableTransform\n});\n\nsurface.on(\"click\", function(){\n    transitionableTransform.setScale([3,3,1], {duration: 3000});\n});\n\nmainContext.add(modifier).add(surface);\n"}],"tweentransition":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/tweentransition/example","instruction":"TweenTransition\n--------\n\nTweenTransition is a state maintainer for a smooth transition between\nnumerically-specified states.\n\nIn this example, a surface is faded out based on a TweenTransition.","javascript":"var Engine          = require(\"famous/core/Engine\");\nvar Surface         = require(\"famous/core/Surface\");\nvar Modifier        = require(\"famous/core/Modifier\");\nvar Transform       = require(\"famous/core/Transform\");\nvar Transitionable  = require(\"famous/transitions/Transitionable\");\nvar TweenTransition = require(\"famous/transitions/TweenTransition\");\n\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size:[100,100],\n    content: 'Click Me',\n    classes: ['red-bg'],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar modifier = new Modifier({\n    origin: [.5,.5],\n    transform: Transform.translate(0,0,0)\n});\n\nTransitionable.registerMethod('tween', TweenTransition);\n\nvar transition = {\n    method: 'tween',\n    curve: \"easeInOut\",\n    period: 1500,\n};\n\nsurface.on(\"click\", function(){\n    modifier.setOpacity(0,transition);\n});\n\nmainContext.add(modifier).add(surface);\n"}],"walltransition":[{"name":"example","url":"https://famo.us/examples/0.2.0/transitions/walltransition/example","instruction":"WallTransition\n--------\n\nWallTransition is a method of transitioning between two values (numbers,\nor arrays of numbers) with a bounce. Unlike a SpringTransition\nThe transition will not overshoot the target, but bounce back against it.\nThe behavior of the bounce is specified by the transition options.\n\nIn this example, there is a surface attached to a WallTransition.","javascript":"var Engine         = require(\"famous/core/Engine\");\nvar Surface        = require(\"famous/core/Surface\");\nvar Modifier       = require(\"famous/core/Modifier\");\nvar Transform      = require(\"famous/core/Transform\");\nvar Transitionable = require(\"famous/transitions/Transitionable\");\nvar WallTransition = require(\"famous/transitions/WallTransition\");\n\n\n// create the main context\nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size:[100,100],\n    content: 'Click Me',\n    classes: ['red-bg'],\n    properties: {\n        textAlign: 'center',\n        lineHeight: '100px'\n    }\n});\n\nvar modifier = new Modifier({\n    origin: [.5,.5],\n    transform: Transform.translate(0,-240,0)\n});\n\nTransitionable.registerMethod('wall', WallTransition);\n\nvar transition = {\n    method: 'wall',\n    period: 1000,\n    dampingRatio : 0,\n    velocity: 0,\n    restitution : .5 //how bouncy the wall is\n};\n\nsurface.on(\"click\", function(){\n    modifier.setTransform(Transform.translate(0,0,0),transition);\n});\n\nmainContext.add(modifier).add(surface);\n"}],"keycodes":[{"name":"example","url":"https://famo.us/examples/0.2.0/utilities/keycodes/example","instruction":"KeyCodes\n---------\n\nKeyCodes is a simple utility for mapping number and letter\nkeycodes.\n\nIn this example, the content of the surface reflects whether\nthe last key pressed was a number or not.","javascript":"var Engine   = require('famous/core/Engine');\nvar Surface  = require('famous/core/Surface');\nvar Modifier = require('famous/core/Modifier');\nvar KeyCodes = require('famous/utilities/KeyCodes');\n   \nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [200, 200],\n    content: 'press keys',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\n\nmainContext.add(new Modifier({origin :[.5, .5]})).add(surface);\n\nEngine.on('keypress', function(event) {\n    if (event.charCode >= KeyCodes['0'] && event.charCode <= KeyCodes['9']) {\n        surface.setContent('you hit a number');\n    } else {\n        surface.setContent('not a number')\n    }\n});\n"}],"timer":[{"name":"every","url":"https://famo.us/examples/0.2.0/utilities/timer/every","instruction":"Timer every\n------------\n\nEvery will continually run a function after a particular \namount of engine ticks.\n\nIn this example we run a function to update the surfaces content\nafter 100 engine ticks.","javascript":"var Engine   = require('famous/core/Engine');\nvar Modifier = require('famous/core/Modifier');\nvar Surface  = require('famous/core/Surface');\nvar Timer    = require('famous/utilities/Timer');\n\nvar mainContext = Engine.createContext();\n\nvar counter = 0;\nvar surface = new Surface({\n    size: [undefined, undefined],\n    content: 'this function will run every 100 engine ticks',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '500px',\n        textAlign: 'center'\n    }\n});\nmainContext.add(new Modifier({origin :[.5, .5]})).add(surface);\n\nTimer.every(function() {\n    surface.setContent('this function has run ' + ++counter + ' time(s)');\n}, 100);\n"},{"name":"after","url":"https://famo.us/examples/0.2.0/utilities/timer/after","instruction":"Timer\n--------\n\nTimer is a utility that integrates with Engine to \nperform more precise timing operations.\n\nIn this example we reset the content of the surface\nafer 200 ticks from the Engine.","javascript":"// import dependencies\nvar Engine = require('famous/core/Engine');\nvar Surface = require('famous/core/Surface');\nvar Modifier = require('famous/core/Modifier');\nvar Timer = require('famous/utilities/Timer');\n   \nvar mainContext = Engine.createContext();\n\nvar counter = 0;\n\nvar surface = new Surface({\n    size: [undefined, 200],\n    content: 'this function has not been run',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '200px',\n        textAlign: 'center'\n    }\n});\n\nmainContext.add(new Modifier({origin :[.5, .5]})).add(surface);\n\nTimer.after(function() {\n    surface.setContent('this function was run after 200 Engine ticks')\n}, 200);\n"},{"name":"clear","url":"https://famo.us/examples/0.2.0/utilities/timer/clear","instruction":"Timer clear\n------------\n\nClear will remove a function that depends on Engine to be run.\n\nIn this example we remove a prerender listener after 1 second.","javascript":"var Engine   = require('famous/core/Engine');\nvar Surface  = require('famous/core/Surface');\nvar Modifier = require('famous/core/Modifier');\nvar Timer    = require('famous/utilities/Timer');\n   \nvar mainContext = Engine.createContext();\n\nvar counter = 0;\n\nvar surface = new Surface({\n    size: [500, 500],\n    content: 'this function has run ' + counter + ' time(s) and will stop after 3',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '500px',\n        textAlign: 'center'\n    }\n});\nmainContext.add(new Modifier({origin :[.5, .5]})).add(surface);\n\nvar fn = function() {\n    surface.setContent('this function has run ' + ++counter + ' time(s) and will stop after 1 second')\n};\n\nEngine.on('prerender', fn);\n\nTimer.setTimeout(function() {\n    Timer.clear(fn);\n}, 1000)\n"},{"name":"setTimeout","url":"https://famo.us/examples/0.2.0/utilities/timer/setTimeout","instruction":"Timer setTimeout\n-----------------\n\nTimer contains a settimeout function that duplicates the native\nsetInterval but relies on the engine to execute the function.\n\nIn this example we reset the content of the surface after one second.","javascript":"var Engine   = require('famous/core/Engine');\nvar Surface  = require('famous/core/Surface');\nvar Modifier = require('famous/core/Modifier');\nvar Timer    = require('famous/utilities/Timer');\n   \nvar mainContext = Engine.createContext();\n\nvar surface = new Surface({\n    size: [500, 500],\n    content: 'Initial State',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '500px',\n        textAlign: 'center'\n    }\n});\nmainContext.add(new Modifier({origin :[.5, .5]})).add(surface);\n\nTimer.setTimeout(function() {\n    surface.setContent('this function was run after 1000 milliseconds')\n}, 1000);\n"},{"name":"setInterval","url":"https://famo.us/examples/0.2.0/utilities/timer/setInterval","instruction":"Timer setInterval\n-----------------\n\nTimer contains a setInterval function that duplicates the native\nsetInterval but relies on the engine to execute the function.\n\nIn this example we reset the content of the surface every second.","javascript":"var Engine   = require('famous/core/Engine');\nvar Modifier = require('famous/core/Modifier');\nvar Surface  = require('famous/core/Surface');\nvar Timer    = require('famous/utilities/Timer');\n   \nvar mainContext = Engine.createContext();\n\nvar counter = 0;\nvar surface = new Surface({\n    size: [500, 500],\n    content: 'this function will run every second',\n    classes: ['red-bg'],\n    properties: {\n        lineHeight: '500px',\n        textAlign: 'center'\n    }\n});\nmainContext.add(new Modifier({origin :[.5, .5]})).add(surface);\n\nTimer.setInterval(function() {\n    surface.setContent('this function has run ' + ++counter + ' time(s)')\n}, 1000);\n"}],"utility":[{"name":"after","url":"https://famo.us/examples/0.2.0/utilities/utility/after","instruction":"After\n--------\n\nAfter is a utility that will run a particular callback\nonce the returned function is called a set number of\ntimes.\n\nIn the example, the callback is run after the 5th click.","javascript":"\nvar Engine  = require('famous/core/Engine');\nvar Utility = require('famous/utilities/Utility');\n\nvar fn = Utility.after(5, function() {\n    alert('Was called on 5th try');\n});\n\nEngine.on('click', fn);\n"}],"deck":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/deck/example","instruction":"Deck\n-----------\n\nDeck is a SequentialLayout that can be open and closed\nwith defined animations.\n\nIn this example, we can see that when we click we end up\nopening the decks so that their contents expand outwards.","javascript":"var Engine         = require('famous/core/Engine');\nvar Transform      = require('famous/core/Transform');\nvar Modifier       = require('famous/core/Modifier');\nvar Surface        = require('famous/core/Surface');\nvar Transitionable = require('famous/transitions/Transitionable');\nvar Deck           = require('famous/views/Deck');\nvar GridLayout     = require('famous/views/GridLayout');\n\nvar SpringTransition = require('famous/transitions/SpringTransition');\nTransitionable.registerMethod('spring', SpringTransition);\n\nvar mainContext = Engine.createContext();\n\nvar surfaces = [];\nvar myLayout = new Deck({\n    itemSpacing: 10,\n    transition: {\n        method: 'spring',\n        period: 300,\n        dampingRatio: 0.5\n    },\n    stackRotation: 0.02\n});\n\nmyLayout.sequenceFrom(surfaces);\n\nfor(var i = 0; i < 5; i++) {\n    var temp = new Surface({\n        size: [100, 200],\n        classes: ['test'],\n        properties: {\n            backgroundColor: 'hsla(' + ((i*5 + i)*15 % 360) + ', 60%, 50%, 0.8)'\n        },\n        content: i\n    });\n\n    temp.on('click', function() {\n        myLayout.toggle();\n    });\n    surfaces.push(temp);\n}\n\nvar containerModifier = new Modifier({\n    origin: [0.5, 0.5]\n});\n\nmainContext.add(containerModifier).add(myLayout);\n"}],"edgeswapper":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/edgeswapper/example","instruction":"EdgeSwapper\n------------\n\nEdgeSwapper is a container which handles swapping \nrenderables from the edge of its parent context.\n\nIn this example, we toggle the view that is shown on every\nclick.","javascript":"var Engine      = require(\"famous/core/Engine\");\nvar Surface     = require(\"famous/core/Surface\");\nvar EdgeSwapper = require(\"famous/views/EdgeSwapper\");\n\nvar mainContext = Engine.createContext();\n\nvar edgeswapper = new EdgeSwapper();\n\nvar primary = new Surface({\n    size: [undefined, undefined],\n    content: \"Primary\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: window.innerHeight + \"px\",\n        textAlign: \"center\"\n    }\n});\n\nvar secondary = new Surface({\n    size: [undefined, undefined],\n    content: \"Secondary\",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: window.innerHeight + \"px\",\n        textAlign: \"center\"\n    }\n});\nmainContext.add(edgeswapper); \n\nedgeswapper.show(primary);\n\nvar showing = true;\nEngine.on(\"click\", function() {\n    if (showing) {\n        edgeswapper.show(secondary);\n        showing = false;\n    } else {\n        edgeswapper.show(primary);\n        showing = true;\n    }\n});\n"}],"gridlayout":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/gridlayout/example","instruction":"GridLayout\n-------------\n\nGridLayout is a layout which divides a context into several evenly-sized grid cells.\nIf dimensions are provided, the grid is evenly subdivided with children\ncells representing their own context, otherwise the cellSize property is used to compute \ndimensions so that items of cellSize will fit.\n\nIn this example, we make a 4x2 grid with 8 surfaces with varying hues.","javascript":"var Engine     = require(\"famous/core/Engine\");\nvar Surface    = require(\"famous/core/Surface\");\nvar GridLayout = require(\"famous/views/GridLayout\");\n\nvar mainContext = Engine.createContext();\n\nvar grid = new GridLayout({\n    dimensions: [4, 2]\n});\n\nvar surfaces = [];\ngrid.sequenceFrom(surfaces);\n\nfor(var i = 0; i < 8; i++) {\n    surfaces.push(new Surface({\n        content: \"I am panel \" + (i + 1),\n        size: [undefined, undefined],\n        properties: {\n            backgroundColor: \"hsl(\" + (i * 360 / 8) + \", 100%, 50%)\",\n            color: \"black\",\n            lineHeight: window.innerHeight / 2 + 'px',\n            textAlign: 'center'\n        }\n    }));\n}\n\nmainContext.add(grid);\n"},{"name":"with-sized-modifier","url":"https://famo.us/examples/0.2.0/views/gridlayout/with-sized-modifier","instruction":"GridLayout with sized modifier\n------------------------------\n\nGridLayouts will respect their parents size.  When placed behind\na modifier with a set size, the layout will expand to that size\ninstead of filling the full window.\n\nIn this example, we see a GridLayout behind a sized Modifier.","javascript":"var Engine     = require(\"famous/core/Engine\");\nvar Surface    = require(\"famous/core/Surface\");\nvar Modifier   = require(\"famous/core/Modifier\");\nvar GridLayout = require(\"famous/views/GridLayout\");\n\nvar mainContext = Engine.createContext();\n\nvar grid = new GridLayout({\n    dimensions: [4, 2]\n});\n\nvar surfaces = [];\ngrid.sequenceFrom(surfaces);\n\nfor(var i = 0; i < 8; i++) {\n    surfaces.push(new Surface({\n        content: \"I am panel \" + (i + 1),\n        size: [undefined, 100],\n        properties: {\n            backgroundColor: \"hsl(\" + (i * 360 / 8) + \", 100%, 50%)\",\n            color: \"black\",\n            lineHeight: '100px',\n            textAlign: 'center'\n        }\n    }));\n}\n\nmainContext.add(new Modifier({size: [400, 200], origin: [.5, .5]})).add(grid);\n"}],"headerfooterlayout":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/headerfooterlayout/example","instruction":"HeaderFooterLayout\n------------------\n\nHeaderFooterLayout is a layout which will arrange three renderables\ninto a header and footer area of defined size and a content area\nof flexible size.\n\nIn this example we create a basic HeaderFooterLayout and define a \nsize for the header and footer","javascript":"var Engine             = require(\"famous/core/Engine\");\nvar Surface            = require(\"famous/core/Surface\");\nvar HeaderFooterLayout = require(\"famous/views/HeaderFooterLayout\");\n\nvar mainContext = Engine.createContext();\n\nvar layout = new HeaderFooterLayout({\n    headerSize: 100,\n    footerSize: 50\n});\n\nlayout.header.add(new Surface({\n    size: [undefined, 100],\n    content: \"Header\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"100px\",\n        textAlign: \"center\"\n    }\n}));\n\nlayout.content.add(new Surface({\n    size: [undefined, undefined],\n    content: \"Content\",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: window.innerHeight - 150 + 'px',\n        textAlign: \"center\"\n    }\n}));\n\nlayout.footer.add(new Surface({\n    size: [undefined, 50],\n    content: \"Footer\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"50px\",\n        textAlign: \"center\"\n    }\n}));\n\nmainContext.add(layout);\n"},{"name":"with-sized-modifier","url":"https://famo.us/examples/0.2.0/views/headerfooterlayout/with-sized-modifier","instruction":"HeaderFooterLayout with sized modifier\n---------------------------------------\n\nHeaderFooterLayout will respect the size of any parent\nsizing.  When is sits below a modifier with a set size,\nit will fit the size of the modifier instead of the\ncontext's size.\n\nIn this example, we have a HeaderFooterLayout sit below a \nsized modifier in the render tree with a rotation applied\nas well.","javascript":"var Engine             = require(\"famous/core/Engine\");\nvar Surface            = require(\"famous/core/Surface\");\nvar Modifier           = require(\"famous/core/Modifier\");\nvar Transform          = require(\"famous/core/Transform\");\nvar HeaderFooterLayout = require(\"famous/views/HeaderFooterLayout\");\n\nvar mainContext = Engine.createContext();\n\nvar layout = new HeaderFooterLayout({\n    headerSize: 100,\n    footerSize: 50\n});\n\nlayout.header.add(new Surface({\n    size: [undefined, 100],\n    content: \"Header\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"100px\",\n        textAlign: \"center\"\n    }\n}));\n\nlayout.content.add(new Surface({\n    size: [undefined, undefined],\n    content: \"Content\",\n    classes: [\"grey-bg\"],\n    properties: {\n        lineHeight: '150px',\n        textAlign: \"center\"\n    }\n}));\n\nlayout.footer.add(new Surface({\n    size: [undefined, 50],\n    content: \"Footer\",\n    classes: [\"red-bg\"],\n    properties: {\n        lineHeight: \"50px\",\n        textAlign: \"center\"\n    }\n}));\n\nmainContext.add(new Modifier({transform: Transform.rotateZ(.7),size: [300, 300], origin: [.5, .5]})).add(layout);\n"}],"rendercontroller":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/rendercontroller/example","instruction":"RenderController\n-------------------\n\nRenderController is a dynamic view that can show or hide\ndifferent renerables with transitions.\n\nIn this example, we iterate through a collection of 10\nsurfaces on click events.","javascript":"var Engine           = require(\"famous/core/Engine\");\nvar Modifier         = require(\"famous/core/Modifier\");\nvar Surface          = require(\"famous/core/Surface\");\nvar RenderController = require(\"famous/views/RenderController\");\n\nvar mainContext = Engine.createContext();\nvar renderController = new RenderController();\nvar surfaces = [];\nvar counter = 0;\n\nfor (var i = 0; i < 10; i++) {\n    surfaces.push(new Surface({\n         content: \"Surface: \" + (i + 1),\n         size: [200, 200],\n         properties: {\n             backgroundColor: \"hsl(\" + (i * 360 / 10) + \", 100%, 50%)\",\n             lineHeight: \"200px\",\n             textAlign: 'center'\n         }\n    }));\n}\n\nrenderController.show(surfaces[0]);\n\nEngine.on(\"click\", function() {\n    var next = (counter++ + 1) % surfaces.length;\n    this.show(surfaces[next]);\n}.bind(renderController));\n\nmainContext.add(new Modifier({origin: [.5, .5]})).add(renderController);\n"}],"scrollview":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/scrollview/example","instruction":"Scrollview\n------------\n\nScrollview is one of the core views in Famo.us. Scrollview\nwill lay out a collection of renderables sequentially in \nthe specified direction, and will allow you to scroll \nthrough them with mousewheel or touch events.\n\nIn this example, we have a Scrollview that sequences over\na collection of surfaces that vary in color","javascript":"var Engine     = require(\"famous/core/Engine\");\nvar Surface    = require(\"famous/core/Surface\");\nvar Scrollview = require(\"famous/views/Scrollview\");\n\nvar mainContext = Engine.createContext();\n\nvar scrollview = new Scrollview();\nvar surfaces = [];\n\nscrollview.sequenceFrom(surfaces);\n\nfor (var i = 0, temp; i < 40; i++) {\n    temp = new Surface({\n         content: \"Surface: \" + (i + 1),\n         size: [undefined, 200],\n         properties: {\n             backgroundColor: \"hsl(\" + (i * 360 / 40) + \", 100%, 50%)\",\n             lineHeight: \"200px\",\n             textAlign: \"center\"\n         }\n    });\n\n    temp.pipe(scrollview);\n    surfaces.push(temp);\n}\n\nmainContext.add(scrollview);\n"}],"sequentiallayout":[{"name":"example","url":"https://famo.us/examples/0.2.0/views/sequentiallayout/example","instruction":"SequentialLayout\n------------------\n\nSequentialLayout will lay out a collection of renderables\nsequentially in the specified direction.\n\nIn this example, we have ten surfaces displayed veritcally.","javascript":"var Engine           = require(\"famous/core/Engine\");\nvar Surface          = require(\"famous/core/Surface\");\nvar SequentialLayout = require(\"famous/views/SequentialLayout\");\n\nvar mainContext = Engine.createContext();\n\nvar sequentialLayout = new SequentialLayout({\n    direction: 1\n});\nvar surfaces = [];\n\nsequentialLayout.sequenceFrom(surfaces);\n\nfor (var i = 0; i < 10; i++) {\n    surfaces.push(new Surface({\n         content: \"Surface: \" + (i + 1),\n         size: [undefined, window.innerHeight/10],\n         properties: {\n             backgroundColor: \"hsl(\" + (i * 360 / 10) + \", 100%, 50%)\",\n             lineHeight: window.innerHeight/10 + \"px\",\n             textAlign: \"center\"\n         }\n    }));\n}\n\nmainContext.add(sequentialLayout);\n"}]}